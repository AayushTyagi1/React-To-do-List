{"version":3,"sources":["Components/Navbar/Navbar.js","Components/Additem/Additem.js","Components/ViewItem/ViewItem.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Additem","tasks","settasks","useState","inputTask","setInputTask","display","ErrorStyle","setErrorStyle","onSubmit","e","preventDefault","id","length","text","isComplete","type","name","placeholder","value","onChange","target","style","ViewItem","map","items","key","opacity","onClick","newtasks","item","handleCompleteItem","textDecoration","filteredtasks","filter","deleteItem","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAGe,SAASA,IACtB,OACE,yBAAKC,UAAU,UACb,yCACA,sD,iBCJS,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAAY,EACjBC,mBAAS,IADQ,mBAC5CC,EAD4C,KACjCC,EADiC,OAGfF,mBAAS,CAC3CG,QAAS,SAJwC,mBAG5CC,EAH4C,KAGhCC,EAHgC,KAiCnD,OACE,0BAAMT,UAAU,UAAUU,SAlBN,SAACC,GACrBA,EAAEC,iBACFT,EAAS,GAAD,mBACHD,GADG,CAEN,CACEW,GAAIX,EAAMY,OAASZ,EAAMA,EAAMY,OAAS,GAAGD,GAAK,EAAI,EACpDE,KAAMV,EACNW,YAAY,MAGXX,GACHI,EAAc,CACZF,QAAS,iBAGbD,EAAa,MAIX,yBAAKN,UAAU,cACb,2BACEiB,KAAK,OACLC,KAAK,OACLC,YAAY,oBACZC,MAAOf,EACPgB,SAlCc,SAACV,GACrBL,EAAaK,EAAEW,OAAOF,OAClBT,EAAEW,OAAOF,OACXX,EAAc,CACZF,QAAS,YAgCT,uBAAGgB,MAAOf,GAAV,0BAEF,4BAAQS,KAAK,SAASC,KAAK,UAA3B,a,MC7CS,SAASM,EAAT,GAAwC,IAApBtB,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAiBxC,OACE,yBACEH,UAAU,YACVuB,MAAO,CAAEhB,QAASL,EAAMY,OAAS,QAAU,SAE1CZ,EAAMuB,KAAI,SAACC,GAAD,OACT,0BAAMC,IAAKD,EAAMb,GAAIU,MAAO,CAAEK,QAASF,EAAMV,YAAc,QACzD,2BAAOC,KAAK,WAAWY,QAAS,kBAnBb,SAAChB,GAC1B,IAAMiB,EAAW5B,EAAMuB,KAAI,SAACM,GAAD,OACzBA,EAAKlB,KAAOA,EACR,CACEA,GAAIkB,EAAKlB,GACTE,KAAMgB,EAAKhB,KACXC,YAAae,EAAKf,YAEpBe,KAEN5B,EAAS2B,GASmCE,CAAmBN,EAAMb,OAC/D,uBAAGU,MAAO,CAAEU,eAAgBP,EAAMV,YAAc,iBAC7CU,EAAMX,MAET,4BAAQE,KAAK,SAASY,QAAS,kBA3BpB,SAAChB,GAClB,IAAMqB,EAAgBhC,EAAMiC,QAAO,SAACJ,GAAD,OAAUA,EAAKlB,KAAOA,KACzDV,EAAS+B,GAyBkCE,CAAWV,EAAMb,MAAtD,eChBKwB,MAVf,WAAgB,IAAD,EACajC,mBAAS,IADtB,mBACNF,EADM,KACCC,EADD,KAEb,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASD,MAAOA,EAAOC,SAAUA,IACjC,kBAAC,EAAD,CAAUD,MAAOA,EAAOC,SAAUA,MCCpBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ebe3bacc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <div className=\"Navbar\">\r\n      <h1>Todo List</h1>\r\n      <h2>- Organize your Tasks</h2>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./Additem.css\";\r\n\r\nexport default function Additem({ tasks, settasks }) {\r\n  const [inputTask, setInputTask] = useState(\"\");\r\n\r\n  const [ErrorStyle, setErrorStyle] = useState({\r\n    display: \"none\",\r\n  });\r\n\r\n  const changeHandler = (e) => {\r\n    setInputTask(e.target.value);\r\n    if (e.target.value) {\r\n      setErrorStyle({\r\n        display: \"none\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    settasks([\r\n      ...tasks,\r\n      {\r\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n        text: inputTask,\r\n        isComplete: false,\r\n      },\r\n    ]);\r\n    if (!inputTask) {\r\n      setErrorStyle({\r\n        display: \"inline-block\",\r\n      });\r\n    }\r\n    setInputTask(\"\");\r\n  };\r\n  return (\r\n    <form className=\"Additem\" onSubmit={submitHandler}>\r\n      <div className=\"input_text\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"task\"\r\n          placeholder=\"Write your Task..\"\r\n          value={inputTask}\r\n          onChange={changeHandler}\r\n        />\r\n        <p style={ErrorStyle}>Add something in task</p>\r\n      </div>\r\n      <button type=\"submit\" name=\"submit\">\r\n        Add Task\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./ViewItem.css\";\r\n\r\nexport default function ViewItem({ tasks, settasks }) {\r\n  const deleteItem = (id) => {\r\n    const filteredtasks = tasks.filter((item) => item.id !== id);\r\n    settasks(filteredtasks);\r\n  };\r\n  const handleCompleteItem = (id) => {\r\n    const newtasks = tasks.map((item) =>\r\n      item.id === id\r\n        ? {\r\n            id: item.id,\r\n            text: item.text,\r\n            isComplete: !item.isComplete,\r\n          }\r\n        : item\r\n    );\r\n    settasks(newtasks);\r\n  };\r\n  return (\r\n    <div\r\n      className=\"view_item\"\r\n      style={{ display: tasks.length ? \"block\" : \"none\" }}\r\n    >\r\n      {tasks.map((items) => (\r\n        <form key={items.id} style={{ opacity: items.isComplete && \"0.5\" }}>\r\n          <input type=\"checkbox\" onClick={() => handleCompleteItem(items.id)} />\r\n          <p style={{ textDecoration: items.isComplete && \"line-through\" }}>\r\n            {items.text}\r\n          </p>\r\n          <button type=\"button\" onClick={() => deleteItem(items.id)}>\r\n            Delete\r\n          </button>\r\n        </form>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component, useState } from \"react\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport Additem from \"./Components/Additem/Additem\";\nimport ViewItem from \"./Components/ViewItem/ViewItem\";\n\nfunction App() {\n  const [tasks, settasks] = useState([]);\n  return (\n    <div>\n      <Navbar />\n      <Additem tasks={tasks} settasks={settasks} />\n      <ViewItem tasks={tasks} settasks={settasks} />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}